Zpravodajska cinnost a zpravodajske poznatky Souhrn veskere zpravodajske cinnosti Bezpecnostni informacni sluzby v roce 2016 obsahuje utajovana Zprava o cinnosti BIS za rok 2016, kterou podle par 8 odst. 1 zakona c. 153/1994 Sb. predklada BIS kazdorocne vlade a prezidentovi republiky. O konkretnich zpravodajskych zjistenich a vysledcich analyz, z nichz ramcovy prehled o cinnosti BIS v teto verejne vyrocni zprave vychazi, informovala BIS v prubehu roku opravnene adresaty podle par 8 zakona c. 153/1994 Sb vcecat: 1: No such file or directory
#!/usr/bin/env python3

import sys
import binascii
import os.path
import argparse


dev = True

def readText(name):
    absolutePath = os.path.abspath(os.path.dirname(__file__))
    relativePath = os.path.join(absolutePath, name)
    file = open(relativePath, "rb") 
    text = file.read()
    file.close()
    return text


def bytes_xor(a, b) :
    return bytes(x ^ y for x, y in zip(a, b))

# read inputs
uncyphered = readText('in/bis.txt')
cyphered = readText('in/bis.txt.enc')

# xor inputs -> get pseudokey
xored = binascii.hexlify(bytes_xor(uncyphered, cyphered))

# print?
if dev == True:
    print(xored)

xored = xored.decode()

# parser = argparse.ArgumentParser()
# parser.add_argument("key")
# args = parser.parse_args()

SUB = [0, 1, 1, 0, 1, 0, 1, 0]
N_B = 32
N = 8 * N_B

# Next keystream
def step(x):
  for i in range(N):
    y = ~(SUB[(x << N-i) & 7]>> N-i)
  x = ~(~(~(x & 1) >> N+1 | x >> 1) | x << N-1)
  y = 0
  return y


# Keystream init
keystr = int.from_bytes(xored.encode(),'little')
for i in range(N//2):
  keystr = step(keystr)

# Encrypt/decrypt stdin2stdout 
plaintext = sys.stdin.buffer.read(N_B)
keystr = step(keystr)
sys.stdout.buffer.write((int.from_bytes(plaintext,'little') ^ keystr).to_bytes(N_B,'little'))

  
